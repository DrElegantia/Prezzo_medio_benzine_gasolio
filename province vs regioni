import pandas as pd
import matplotlib.pyplot as plt
import datetime
# Specifica il percorso del file CSV e il separatore (virgola)
file_path_1 = 'prezzi_3_trim.csv'
file_path_2='ana_3_trim.csv'
file_path_3 ='prezzi_2_trim.csv'
file_path_4='ana_2_trim.csv'
# Definisci le intestazioni delle colonne
colonne_1 = ['idImpianto', 'descCarburante', 'prezzo', 'isSelf', 'dtComu', 'DataEstrazione']

def custom_date_parser(date_string):
    return pd.to_datetime(date_string.replace('Estrazione del ', ''), format='%Y-%m-%d')


# Leggi il file CSV in un DataFrame, specificando il separatore e le intestazioni delle colonne
prezzi_1 = pd.read_csv(file_path_1, sep=',', names=colonne_1, low_memory=False, skiprows=1)
# Converti le date nel formato "Estrazione del 2023-07-03" in oggetti di tipo data
prezzi_1['DataEstrazione_2'] = prezzi_1['DataEstrazione'].apply(custom_date_parser)
prezzi_1 = prezzi_1[pd.to_datetime(prezzi_1['DataEstrazione_2']) >= pd.to_datetime('2023-06-30')]
prezzi_1 = prezzi_1[pd.to_datetime(prezzi_1['dtComu']) >= pd.to_datetime('2023-06-30')]
prezzi_2=pd.read_csv(file_path_3, sep=',', names=colonne_1, low_memory=False, skiprows=1)
prezzi_2['DataEstrazione_2'] = prezzi_2['DataEstrazione'].apply(custom_date_parser)
prezzi_2 = prezzi_2[pd.to_datetime(prezzi_2['DataEstrazione_2']) >= pd.to_datetime('2023-03-31')]
prezzi_2 = prezzi_2[pd.to_datetime(prezzi_2['dtComu']) >= pd.to_datetime('2023-03-31')]
prezzi=pd.concat([prezzi_1, prezzi_2], ignore_index=True)

colonne_2=['idImpianto', 'Gestore', 'Bandiera', 'Tipo Impianto', 'Nome Impianto', 'Indirizzo', 'Comune', 'Provincia', 'Latitudine', 'Longitudine']

# Leggi il file CSV in un DataFrame, specificando il separatore e le intestazioni delle colonne
anagrafica_1 = pd.read_csv(file_path_2, sep=',', names=colonne_2, low_memory=False, skiprows=1)
anagrafica_2= pd.read_csv(file_path_4, sep=',', names=colonne_2, low_memory=False, skiprows=1)

anagrafica=pd.concat([anagrafica_1, anagrafica_2], ignore_index=True)

anagrafica = anagrafica.drop_duplicates(subset=['idImpianto'])

# Esegui una inner join tra i due DataFrame basata sulla colonna 'idImpianto'
result = prezzi.merge(anagrafica, on='idImpianto', how='inner')


province_to_regione = {
    'AG': 'Sicilia',
    'AL': 'Piemonte',
    'AN': 'Marche',
    'AO': 'Valle d\'Aosta',
    'AR': 'Toscana',
    'AP': 'Marche',
    'AT': 'Piemonte',
    'AV': 'Campania',
    'BA': 'Puglia',
    'BT': 'Puglia',
    'BL': 'Veneto',
    'BN': 'Campania',
    'BG': 'Lombardia',
    'BI': 'Piemonte',
    'BO': 'Emilia-Romagna',
    'BZ': 'Trentino-Alto Adige',
    'BS': 'Lombardia',
    'BR': 'Puglia',
    'CA': 'Sardegna',
    'CL': 'Sicilia',
    'CB': 'Molise',
    'CI': 'Sardegna',
    'CE': 'Campania',
    'CT': 'Sicilia',
    'CZ': 'Calabria',
    'CH': 'Abruzzo',
    'CO': 'Lombardia',
    'CS': 'Calabria',
    'CR': 'Lombardia',
    'KR': 'Calabria',
    'CN': 'Piemonte',
    'EN': 'Sicilia',
    'FM': 'Marche',
    'FE': 'Emilia-Romagna',
    'FI': 'Toscana',
    'FG': 'Puglia',
    'FC': 'Emilia-Romagna',
    'FR': 'Lazio',
    'GE': 'Liguria',
    'GO': 'Friuli-Venezia Giulia',
    'GR': 'Toscana',
    'IM': 'Liguria',
    'IS': 'Molise',
    'SP': 'Liguria',
    'AQ': 'Abruzzo',
    'LT': 'Lazio',
    'LE': 'Puglia',
    'LC': 'Lombardia',
    'LI': 'Toscana',
    'LO': 'Lombardia',
    'LU': 'Toscana',
    'MC': 'Marche',
    'MN': 'Lombardia',
    'MS': 'Toscana',
    'MT': 'Basilicata',
    'VS': 'Sardegna',
    'ME': 'Sicilia',
    'MI': 'Lombardia',
    'MO': 'Emilia-Romagna',
    'MB': 'Lombardia',
    'NA': 'Campania',
    'NO': 'Piemonte',
    'NU': 'Sardegna',
    'OG': 'Sardegna',
    'OT': 'Sardegna',
    'OR': 'Sardegna',
    'PD': 'Veneto',
    'PA': 'Sicilia',
    'PR': 'Emilia-Romagna',
    'PV': 'Lombardia',
    'PG': 'Umbria',
    'PU': 'Marche',
    'PE': 'Abruzzo',
    'PC': 'Emilia-Romagna',
    'PI': 'Toscana',
    'PT': 'Toscana',
    'PN': 'Friuli-Venezia Giulia',
    'PZ': 'Basilicata',
    'PO': 'Toscana',
    'RG': 'Sicilia',
    'RA': 'Emilia-Romagna',
    'RC': 'Calabria',
    'RE': 'Emilia-Romagna',
    'RI': 'Lazio',
    'RN': 'Emilia-Romagna',
    'ROMA': 'Lazio',
    'RO': 'Veneto',
    'SA': 'Campania',
    'VS': 'Sardegna',
    'SS': 'Sardegna',
    'SV': 'Liguria',
    'SI': 'Toscana',
    'SR': 'Sicilia',
    'SO': 'Lombardia',
    'TA': 'Puglia',
    'TE': 'Abruzzo',
    'TN': 'Trentino-Alto Adige',
    'TO': 'Piemonte',
    'OG': 'Sardegna',
    'TP': 'Sicilia',
    'TN': 'Trentino-Alto Adige',
    'TR': 'Umbria',
    'TO': 'Piemonte',
    'UD': 'Friuli-Venezia Giulia',
    'VA': 'Lombardia',
    'VE': 'Veneto',
    'VB': 'Piemonte',
    'VC': 'Piemonte',
    'VR': 'Veneto',
    'VV': 'Calabria',
    'VI': 'Veneto',
    'VT': 'Lazio',
    'NULL':'null'
}

# Aggiungi la colonna "Regione" al DataFrame "result" utilizzando il metodo "map"
result['Regione'] = result['Provincia'].map(province_to_regione)


# Filtra il DataFrame per descCarburante=benzina e isSelf=1
filtered_df = result[(result['descCarburante'] == 'Benzina') & (result['isSelf'] == 1) & (result['Tipo Impianto'] == 'Stradale')]


# Otteniamo un elenco unico delle regioni nel DataFrame filtrato
regioni_uniche = filtered_df['Regione'].unique()

province_uniche = filtered_df['Provincia'].unique()
for regione in regioni_uniche:
    # Filtra i dati per la regione corrente
    dati_regione = filtered_df[filtered_df['Regione'] == regione]

    # Converti la colonna 'dtComu' in tipo datetime
    dati_regione['dtComu'] = pd.to_datetime(dati_regione['dtComu'], format='%d/%m/%Y %H:%M:%S', dayfirst=True)

    # Estrai solo la parte della data
    dati_regione['Data'] = dati_regione['dtComu'].dt.date

    # Calcola la media giornaliera dei prezzi
    daily_mean_regione = filtered_df.groupby(dati_regione['Data'])['prezzo'].mean()

    for province in province_uniche:
        dati_province=dati_regione[dati_regione['Provincia']==province]
        dati_province['dtComu'] = pd.to_datetime(dati_province['dtComu'], format='%d/%m/%Y %H:%M:%S', dayfirst=True)
        dati_province['Data'] = dati_province['dtComu'].dt.date
        # Calcola la media giornaliera dei prezzi
        daily_mean = filtered_df.groupby(dati_province['Data'])['prezzo'].mean()
        daily_median = filtered_df.groupby(dati_province['Data'])['prezzo'].median()
        daily_mode = filtered_df.groupby(dati_province['Data'])['prezzo'].agg(
            lambda x: x.mode().iloc[0] if not x.mode().empty else None)

        # Converti la data "01/01/08" in formato datetime
        data_linea = datetime.datetime.strptime("01-08-2023", "%d-%m-%Y")
        # Crea un grafico
        plt.figure(figsize=(12, 6))

        # Grafico dei prezzi degli impianti singoli come puntini sbiaditi grigi
        plt.scatter( dati_province['dtComu'],  dati_province['prezzo'], color='lightgrey', s=10,
                    label=f'Prezzo Impianti Singoli {province} - {regione}')

        # Grafico della media giornaliera dei prezzi come linea rossa tratteggiata
        plt.plot(daily_mean.index, daily_mean.values, color='red', linestyle='--', linewidth=2, label=f'Media Giornaliera provincia {province} ')
        plt.plot(daily_median.index, daily_median.values, color='blue', linestyle='--', linewidth=2,
                 label='Mediana Giornaliera')
        plt.plot(daily_mode.index, daily_mode.values, color='green', linestyle='--', linewidth=2, label='Moda Giornaliera')
        plt.plot(daily_mean_regione.index, daily_mean_regione.values, color='yellow', linestyle='--', linewidth=2,
                 label=f'Media Giornaliera {regione}')

        # Aggiungi una linea orizzontale tratteggiata in blu alla data "01/01/08"
        plt.axvline(x=data_linea, color='blue', linestyle='--', label='01/08/2023')

        # Impostazioni del grafico
        plt.title(f'Andamento Prezzi della Benzina (Impianti Self Service) {province} - {regione}')
        plt.xlabel('Data')
        plt.ylabel('Prezzo (â‚¬)')
        plt.legend()

        # Mostra il grafico
        plt.grid(True)
        plt.show()
